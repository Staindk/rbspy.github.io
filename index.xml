<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rbspy docs</title>
    <link>https://rbspy.github.io/</link>
    <description>Recent content on rbspy docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://rbspy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About this profiling guide</title>
      <link>https://rbspy.github.io/about-profiling-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/about-profiling-guide/</guid>
      <description>rbspy&amp;rsquo;s goal is not just to be a Ruby profiler, but to make profiling a little bit more accessible to the Ruby community in general and something that more programmers do.
I&amp;rsquo;ve heard from a lot of people over the years that they find profiling confusing and that they don&amp;rsquo;t know where to start. So this profiling guide (the index is on the sidebar) aims to explain some of the basics of profiling (what&amp;rsquo;s benchmarking?</description>
    </item>
    
    <item>
      <title>Benchmarking your code</title>
      <link>https://rbspy.github.io/benchmarking-your-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/benchmarking-your-code/</guid>
      <description>People who are just getting started making their code faster sometimes confuse benchmarking and profiling. Let&amp;rsquo;s explain the difference and how to use both techniques to make your code faster!
In short: a benchmark tells you how slow your code is (&amp;ldquo;it took 20 seconds to do X Y Z&amp;rdquo;) and a profiler tells you why it&amp;rsquo;s slow (&amp;ldquo;35% of that time was spent doing compression&amp;rdquo;).
What&amp;rsquo;s benchmarking? Why is it important?</description>
    </item>
    
    <item>
      <title>Getting help with rbspy</title>
      <link>https://rbspy.github.io/getting-help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/getting-help/</guid>
      <description>Places you can get help with rbspy:
 The mailing list! Email rbspy-users@googlegroups.com. Gitter chat room: http://gitter.im/rbspy/rbspy. If you think you&amp;rsquo;ve found a bug, create an issue on github  </description>
    </item>
    
    <item>
      <title>Installing rbspy</title>
      <link>https://rbspy.github.io/installing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/installing/</guid>
      <description>Download a binary Installing rbspy is easy: it&amp;rsquo;s a single static binary. There are binaries for Linux and Mac, which are the two supported platforms.
 Download the latest release from the releases page Unzip + move the rbspy binary to /usr/local/bin/rbspy  Compile from source Step 1: Install Cargo (if you haven&amp;rsquo;t already). There&amp;rsquo;s a guide in the cargo docs, or just run this command.
curl -sSf https://static.rust-lang.org/rustup.sh | sh  Step 2: Add ~/.</description>
    </item>
    
    <item>
      <title>Profiling examples</title>
      <link>https://rbspy.github.io/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/examples/</guid>
      <description>The case of the slow unit test To get an idea of how rbspy can help you do profiling, let&amp;rsquo;s do a couple of quick examples!
$ wget http://rbspy.github.io/examples/slow_test.rb $ ruby slow_test.rb Loaded suite static/examples/test Started . Finished in 4.001482979 seconds.  Why is this test taking 4 seconds to run? Let&amp;rsquo;s run rbspy!
$ rbspy record ruby slow_test.rb Summary of profiling data so far: % self % total name 96.</description>
    </item>
    
    <item>
      <title>Questions to ask when optimizing</title>
      <link>https://rbspy.github.io/optimization-questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/optimization-questions/</guid>
      <description>When people start looking at profiling data, they&amp;rsquo;re often unsure of where to start.
If you have a slow program that you want to start optimizing, here are a few questions to consider using your profiling tools to answer.
Is my program mostly using the CPU or mostly waiting? If your program is slow, the first most important thing to find out is whether it&amp;rsquo;s slow because it&amp;rsquo;s using the CPU or if it&amp;rsquo;s slow because it&amp;rsquo;s waiting for the disk or network or something.</description>
    </item>
    
    <item>
      <title>Should I use rbspy or stackprof?</title>
      <link>https://rbspy.github.io/rbspy-vs-stackprof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/rbspy-vs-stackprof/</guid>
      <description>rbspy and stackprof are both sampling profilers for Ruby. They both let you generate flamegraphs. So when should you use rbspy, and when should you use stackprof?
The two tools are actually used in pretty different ways! rbspy is a command line tool (rbspy record --pid YOUR_PID), and stackprof is a library that you can include in your Ruby program and use to profile a given section of code.</description>
    </item>
    
    <item>
      <title>Using flamegraphs</title>
      <link>https://rbspy.github.io/using-flamegraphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/using-flamegraphs/</guid>
      <description>What&amp;rsquo;s a flamegraph? rbspy uses Brendan Gregg&amp;rsquo;s flamegraph script to generate flamegraphs! The flamegraph format is documented at http://www.brendangregg.com/flamegraphs.html, but here&amp;rsquo;s a very basic introduction. Everything in here is true for flamegraphs in general, not just the flamegraphs rbspy generates.
Flamegraphs are a way to visualize how your program is spending its time. A few important things about flamegraphs:
 The colours are randomly generated (they don&amp;rsquo;t mean anything) The x axis on the flamegraph doesn&amp;rsquo;t represent time.</description>
    </item>
    
    <item>
      <title>Using rbspy</title>
      <link>https://rbspy.github.io/using-rbspy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/using-rbspy/</guid>
      <description>Subcommands rbspy has 3 subcommands: snapshot, record, and report.
Snapshot Snapshot takes a single stack trace from the specified process, prints it, and exits. This is useful if you have a stuck Ruby program and just want to know what it&amp;rsquo;s doing right now. Must be run as root.
sudo rbspy snapshot --pid $PID  Record Record records stack traces from your process and saves them to disk.
rbspy record will save 2 files: a gzipped raw data file, and a visualization (by default a flamegraph, you can configure the visualization format with --format).</description>
    </item>
    
  </channel>
</rss>