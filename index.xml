<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rbspy</title>
    <link>https://rbspy.github.io/</link>
    <description>Recent content on rbspy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://rbspy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing rbspy</title>
      <link>https://rbspy.github.io/installing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/installing/</guid>
      <description>Download a binary Installing rbspy is easy: it&amp;rsquo;s a single static binary. There are binaries for Linux and Mac, which are the two supported platforms.
 Download the latest release from the releases page Unzip + move the rbspy binary to /usr/local/bin/rbspy  Compile from source Step 1: Install Cargo (if you haven&amp;rsquo;t already). There&amp;rsquo;s a guide in the cargo docs, or just run this command.
curl -sSf https://static.rust-lang.org/rustup.sh | sh  Step 2: Add ~/.</description>
    </item>
    
    <item>
      <title>Profiling examples</title>
      <link>https://rbspy.github.io/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/examples/</guid>
      <description>The case of the slow unit test To get an idea of how rbspy can help you do profiling, let&amp;rsquo;s do a couple of quick examples!
$ wget http://rbspy.github.io/examples/slow_test.rb $ ruby slow_test.rb Loaded suite static/examples/test Started . Finished in 4.001482979 seconds.  Why is this test taking 4 seconds to run? Let&amp;rsquo;s run rbspy!
$ rbspy record ruby slow_test.rb Summary of profiling data so far: % self % total name 96.</description>
    </item>
    
    <item>
      <title>Should I use rbspy or stackprof?</title>
      <link>https://rbspy.github.io/rbspy-vs-stackprof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/rbspy-vs-stackprof/</guid>
      <description>rbspy and stackprof are both sampling profilers for Ruby. They both let you generate flamegraphs. So when should you use rbspy, and when should you use stackprof?
The two tools are actually used in pretty different ways! rbspy is a command line tool (rbspy record --pid YOUR_PID), and stackprof is a library that you can include in your Ruby program and use to profile a given section of code.</description>
    </item>
    
    <item>
      <title>Using flamegraphs</title>
      <link>https://rbspy.github.io/using-flamegraphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/using-flamegraphs/</guid>
      <description>What&amp;rsquo;s a flamegraph? rbspy uses Brendan Gregg&amp;rsquo;s flamegraph script to generate flamegraphs! The flamegraph format is documented at http://www.brendangregg.com/flamegraphs.html, but here&amp;rsquo;s a very basic introduction. Everything in here is true for flamegraphs in general, not just the flamegraphs rbspy generates.
Flamegraphs are a way to visualize how your program is spending its time. A few important things about flamegraphs:
 The colours are randomly generated (they don&amp;rsquo;t mean anything) The x axis on the flamegraph doesn&amp;rsquo;t represent time.</description>
    </item>
    
    <item>
      <title>Using rbspy</title>
      <link>https://rbspy.github.io/using-rbspy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rbspy.github.io/using-rbspy/</guid>
      <description>Subcommands rbspy has 3 subcommands: snapshot, record, and report.
Snapshot Snapshot takes a single stack trace from the specified process, prints it, and exits. This is useful if you have a stuck Ruby program and just want to know what it&amp;rsquo;s doing right now. Must be run as root.
sudo rbspy snapshot --pid $PID  Record Record records stack traces from your process and saves them to disk.
rbspy record will save 2 files: a gzipped raw data file, and a visualization (by default a flamegraph, you can configure the visualization format with --format).</description>
    </item>
    
  </channel>
</rss>